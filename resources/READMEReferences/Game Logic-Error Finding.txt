

Basic premise of the game: 
1. The dealer shuffles the deck of 64 cards (5 types of 11 normal cards and 3 types of 3 wild cards) and distributes cards to each participating player. The deck of 64 cards is evenly distributed to the players. (Dealer is not a player).  
2. Any remaining cards are discarded  (i.e. 4 players would have an even 16 cards; 5 players would have 12 cards ( 5*12 = 60) with 4 discarded cards). So the number of cards in the game are dependant on the number of players. 
3. On each card, there is a picture of one either a taco, cat, goat, cheese, or pizza.  
4. The Dealer sits in the middle of the circle of players
5. The game begins with the player located to the left of the dealer and continues around the circle of players in a clockwise manner (or iterative from lowest index to highest of numPlayer.lenth()).
6. If there were 5 players, the game would proceed like this:
Player One Says: "Taco"
Player One Displays card: resulting in non-matching card (non-Taco card)
Player two Says: "Cat"
Player two Displays card: resulting in non-matching card (non-Cat card)
Player three Says: "Goat"
Player three Displays card: resulting in non-matching card (non-Goat card)
Player Four Says: "Cheese"
Player Four Displays card: resulting in non-matching card (non-Cheese card)
Player Five Says: "Pizza"
Player Five Displays card: resulting in non-matching card (non-Pizza card)

If there was never a matching PlayerSays and DisplayCard result, the game would be an infinite loop.  Statistically, that's impossible.  So, when there is a match, this is what happens (using Player One as an example). (Need to code Player One as stopPoint => to #8 for why)

6. Player one has independant actions/methods and 3 shared actions/method:
	A. player Says, "Taco" (
	B. action: lays down card with picture side up
	C. checks and compares card to what Player Says. 
		If non-Taco card is displayed, game continues to next player
		If Taco card is displayed, any player can "slap". This happens because when the Player Says "Taco", and that matches the displayed card, any player can initiate "slap".
		The "Slap" is a method or a game within a game. It's a race among players to identify the match first and the goal is to not be the last "slap".   
		A slap can only occur when there is a match between what the player says and the displayed card. (Error display if no match and attempt at "slap".  
		When there is a match between what the player says and the displayed card, every player "slaps" as fast as they can.  So, there is a list created of "slap" results from the players from fastest slap to slowest slap.  The slowest slap must take all the displayed cards.
		These display cards get added to the loser's deck of cards.  

7. Scoreboard with each players cards is updated
8. The next player is determined by stopPoint + 1, or the player to the left of the player who had the match. In our case, Player One had the match, so now Player two starts the game.
9. Every time there is a match, there is a slap method/game with results from fastest to slowest Players, with the slowest slap receiving all the cards.
10. This continues until one player has no cards and wins a slap contest.  Because there may be multiple players with 0 cards, but  in order to win, you must have 0 cards, and win the slap contest.

11. 

This is the class structure as I see it now, but this is the time to throw the kitchen sink at this project. 


Class Player

//Player would always be in one of 5 methods, PlayerSays(), displayCard(), playerChecks(), playerWaits(), playerSlaps()

int numPlayer;
int playerCardDeck (probably should be a ArrayList that has cards 1,3,5,4,2 that correspond to Taco, Goat, Pizza, Cheese, Cat; 6,7,8 for Gorilla, GroundHog, Narwhal) this needs to be updatable.

+ playerSays()
+ displayCard()
+ playerChecks()
+ playerWaits()
+ playerSlaps()

Subclass User (Human) IS-A Player
int numPlayer;
int playerCardDeck

+playerSays()
+displayCard()
+playerChecks() // when there is a match between playerSays and displayCard() 
+playerWaits() // when this is no match between playerSays and displayCard()
+playerSlaps() //if in playerChecks methods, player can initiate playerSlaps()

Subclass NPC (AI) IS-A Player
int numPlayer;
int playerCardDeck

+playCard() //counts cards passed feed number to Class Hand 
+playerSays()
+displayCard()
+playerChecks() //for the AI NPC, this will have to be coded to check and compare
+playerWaits() // when there is no match between playerSays and displayCard()
+playerSlaps() //if in playerChecks methods, player can initiate playerSlaps(); for AI player will be a random number generator between .5 seconds and 2 seconds.


class Game HAS-A relationship with Player

+ startGame
+ nextTurn
+ endTurn (when slap occurs)
+ startRound
+ endRound (when slap occurs, update board)
+ endGame

class Hand
+decrement card count everytime player displayCard()


class Dealer
+shuffleCards (random number generator)
+dealCard 

class Card
11 normal cards: Taco, Cat, Goat, Cheese, Pizza
9 wild cards: Gorilla, Groundhog, Narwhal

Where to put reaction methods for 3 wild card?  

class Board

+updateBoard()  //updates numCards, numRounds, 
+show()

class Display (takes input from various class methods and displays data)


class Image  (contains ASCII image references/locations for console display)

Where/how would we update the number ever changing number of cards each player has?
	Game Console will have image representation of player(s) and representative deck(s).  
		Number of cards for player in action will decrease by 1 with each nextTurn.  dealerPile will increase by 1 with each nextTurn.
			At each endTurn(), player assigned slowest "slap" will recieve the dealerPile.  dealerPile will be added to playerPile, and dealerPile will be reset to 0.    

